name: "Release version"
on: 
  workflow_dispatch:
  push:
    branches:    
      - 'master'
  
jobs:
  multirelease:
      strategy:
        matrix:
          include:
            - os: ubuntu-latest
              os_short: linux
              compiler_cc: gcc
              compiler_cxx: g++
            - os: windows-latest
              os_short: windows
              compiler_cc: msvc          
        fail-fast: false
      runs-on: ${{ matrix.os }}
      name: ${{ matrix.os_short }}-${{ matrix.os }}-${{ matrix.compiler_cc }}
      env:
        DEPENDENCIES_FOLDER: dependencies      
        DEPENDENCIES_ROOT: ${{ github.workspace }}/dependencies      
        DEPENDENCIES_ROOT_WIN: ${{ github.workspace }}\dependencies              
      steps:
        - name: version
          id: version
          uses: dolittle/read-version-from-file-action@v2
            with:
              path: ./product.version
        - name: release_add
          uses: actions/action-gh-release@v1
          id: create_release
          with:
            draft: false
            prerelease: false
            name: [AMXX] ${{ steps.version.outputs.version }}-APG
            tag_name: ${{ steps.version.outputs.version }}-APG
        - uses: actions/checkout@v2
          with:
            submodules: recursive
            path: amxmodx
        # Setup Python for AMBuild
        - uses: actions/setup-python@v2
          name: Setup Python 3.8
          with:
            python-version: 3.8
        - name: Install Python dependencies
          run: |
            python3 -m pip install --upgrade pip setuptools wheel
            python3 --version
        - name: Install AMXModX dependencies (Linux)
          if: startsWith(runner.os, 'Linux')
          shell: bash
          run: |
            mkdir -p ${{ env.DEPENDENCIES_FOLDER }}
            cd ${{ env.DEPENDENCIES_FOLDER }}
            
            # Satisfy checkout-deps requirement for a "amxmodx" folder.
            mkdir -p amxmodx
            ../amxmodx/support/checkout-deps.sh          
        - name: Install AMXModX dependencies (Windows)
          if: startsWith(runner.os, 'Windows')
          shell: cmd
          run: |
            mkdir %DEPENDENCIES_ROOT_WIN%\nasm
            curl -L -o "%DEPENDENCIES_ROOT_WIN%\nasm\nasm.zip" https://www.nasm.us/pub/nasm/releasebuilds/2.13.03/win32/nasm-2.13.03-win32.zip
            chdir %DEPENDENCIES_ROOT_WIN%\nasm
            7z x nasm.zip
            
            chdir %DEPENDENCIES_ROOT_WIN%
            git clone https://github.com/alliedmodders/ambuild
            git clone https://github.com/Bots-United/metamod-hl1 metamod-bu
            git clone https://github.com/Bots-United/hlsdk hlsdk-bu
            
            curl -L -o "mysql-connector-c-6.1.1-win32.zip" https://downloads.mysql.com/archives/get/p/19/file/mysql-connector-c-6.1.1-win32.zip
            7z x mysql-connector-c-6.1.1-win32.zip -o"mysql"
            cd mysql
            dir
            ren mysql-connector-c-6.1.1-win32 mysql-5.5
            move /Y mysql-5.5 ..\
            
            cd ..\ambuild
            python3 setup.py install          
        - name: Install Linux dependencies
          if: startsWith(runner.os, 'Linux')
          run: |
            sudo dpkg --add-architecture i386
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              gcc-multilib g++-multilib libstdc++6 lib32stdc++6 \
              libc6-dev libc6-dev-i386 linux-libc-dev \
              linux-libc-dev:i386 lib32z1-dev nasm ${{ matrix.compiler_cc }} ${{ matrix.compiler_install }}
        - name: Select compiler
          if: startsWith(runner.os, 'Linux')
          run: |
            echo "CC=${{ matrix.compiler_cc }}" >> $GITHUB_ENV
            echo "CXX=${{ matrix.compiler_cxx }}" >> $GITHUB_ENV
            ${{ matrix.compiler_cc }} --version
            ${{ matrix.compiler_cxx }} --version
        - uses: ilammy/setup-nasm@v1
        - name: Build Linux
          if: startsWith(runner.os, 'Linux')
          working-directory: amxmodx
          run: |
            mkdir build
            cd build
            python3 ../configure.py --enable-optimize --metamod=${{ env.DEPENDENCIES_ROOT }}/metamod-bu --hlsdk=${{ env.DEPENDENCIES_ROOT }}/hlsdk-bu --mysql=${{ env.DEPENDENCIES_ROOT }}/mysql-5.5
            ambuild
        - uses: TheDoctor0/zip-release@0.6.2
          name: Compress linux release
          if: startsWith(runner.os, 'Linux')
          with:
            type: tar
            filename: amxx_${{ steps.version.outputs.version }}-APG_Linux.tar.gz
            file: ./packages/
        - uses: AButler/upload-release-assets@v2.0
          with:
            files: amxx_${{ steps.version.outputs.version }}-APG_Linux.tar.gz
            release-tag: ${{ steps.version.outputs.version }}-APG
        - uses: ilammy/msvc-dev-cmd@v1
          with:
            arch: x86
        - name: Build Windows
          if: startsWith(runner.os, 'Windows')
          working-directory: amxmodx
          shell: cmd
          run: |
            cl.exe
            mkdir build
            cd build
            python3 ../configure.py --enable-optimize --metamod=${{ env.DEPENDENCIES_ROOT_WIN }}\metamod-bu --hlsdk=${{ env.DEPENDENCIES_ROOT_WIN }}\hlsdk-bu --mysql=${{ env.DEPENDENCIES_ROOT_WIN }}\mysql-5.5
            ambuild
        - uses: TheDoctor0/zip-release@0.6.2
          name: Compress windows release
          if: startsWith(runner.os, 'Windows')
          with:
            type: tar
            filename: amxx_${{ steps.version.outputs.version }}-APG_Win32.zip
            file: .\packages
        - uses: AButler/upload-release-assets@v2.0
          with:
            files: amxx_${{ steps.version.outputs.version }}-APG_Win32.zip
            release-tag: ${{ steps.version.outputs.version }}-APG